apiVersion: batch/v1
kind: Job
metadata:
  name: fixdrive-migration
  namespace: fixdrive
spec:
  template:
    spec:
      containers:
      - name: migration
        image: migrate/migrate:latest
        command:
        - migrate
        - -path
        - /migrations
        - -database
        - postgres://user:password@postgres:5432/db?sslmode=disable
        - up
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: fixdrive-config
              key: DB_HOST
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fixdrive-secret
              key: DB_PASSWORD
        volumeMounts:
        - name: migrations
          mountPath: /migrations
      volumes:
      - name: migrations
        configMap:
          name: fixdrive-migrations
      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fixdrive-migrations
  namespace: fixdrive
data:
  # Реальные SQL миграции
  000001_create_drivers_table.up.sql: |
    -- Создание таблицы водителей
    CREATE TABLE client (
                            id SERIAL PRIMARY KEY,
                            email VARCHAR(255) UNIQUE NOT NULL,
                            password_hash VARCHAR(255) NOT NULL,
                            phone_number VARCHAR(20),
                            first_name VARCHAR(100),
                            last_name VARCHAR(100),
                            status VARCHAR(20) DEFAULT 'active',
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Индексы для быстрого поиска
    CREATE INDEX idx_client_email ON client(email);
    CREATE INDEX idx_client_status ON client(status);
  000002_migration.up.sql: |
    CREATE TABLE refresh_tokens (
                                    id SERIAL PRIMARY KEY,
                                    user_id INTEGER NOT NULL,
                                    token VARCHAR(255) NOT NULL UNIQUE,
                                    expires_at TIMESTAMP NOT NULL,
                                    created_at TIMESTAMP DEFAULT NOW(),
                                    is_revoked BOOLEAN DEFAULT false,
                                    CONSTRAINT fk_refresh_tokens_user_id FOREIGN KEY (user_id) REFERENCES client(id) ON DELETE CASCADE
    );

    CREATE INDEX idx_refresh_tokens_token ON refresh_tokens(token);
    CREATE INDEX idx_refresh_tokens_user_id ON refresh_tokens(user_id);
    CREATE INDEX idx_refresh_tokens_expires_at ON refresh_tokens(expires_at);
  000003_migration.up.sql: |
    -- Создание таблицы водителей
    CREATE TABLE drivers (
                             id SERIAL PRIMARY KEY,
                             email VARCHAR(255) UNIQUE NOT NULL,
                             password_hash VARCHAR(255) NOT NULL,
                             phone_number VARCHAR(20),
                             first_name VARCHAR(100),
                             last_name VARCHAR(100),
                             license_number VARCHAR(50) UNIQUE NOT NULL,
                             license_expiry_date DATE NOT NULL,
                             vehicle_brand VARCHAR(100),
                             vehicle_model VARCHAR(100),
                             vehicle_number VARCHAR(20) UNIQUE NOT NULL,
                             vehicle_year INTEGER,
                             status VARCHAR(20) DEFAULT 'pending',
                             rating DECIMAL(3,2) DEFAULT 0.00,
                             created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                             updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Индексы для быстрого поиска
    CREATE INDEX idx_drivers_email ON drivers(email);
    CREATE INDEX idx_drivers_license_number ON drivers(license_number);
    CREATE INDEX idx_drivers_vehicle_number ON drivers(vehicle_number);
    CREATE INDEX idx_drivers_status ON drivers(status);
  000004_migration.up.sql: |
    CREATE TABLE driver_refresh_tokens (
                                           id SERIAL PRIMARY KEY,
                                           driver_id INTEGER NOT NULL,
                                           token VARCHAR(255) NOT NULL UNIQUE,
                                           expires_at TIMESTAMP NOT NULL,
                                           created_at TIMESTAMP DEFAULT NOW(),
                                           is_revoked BOOLEAN DEFAULT false,
                                           CONSTRAINT fk_driver_refresh_tokens_driver_id FOREIGN KEY (driver_id) REFERENCES drivers(id) ON DELETE CASCADE
    );

    CREATE INDEX idx_driver_refresh_tokens_token ON driver_refresh_tokens(token);
    CREATE INDEX idx_driver_refresh_tokens_driver_id ON driver_refresh_tokens(driver_id);
    CREATE INDEX idx_driver_refresh_tokens_expires_at ON driver_refresh_tokens(expires_at); 